//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FifaDAL.BackEndDBF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using FifaModeles;

    public partial class FifaManagerEphecEntities : DbContext
    {
        public FifaManagerEphecEntities(string _connection)
            : base(_connection)
        {
            // 
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        public virtual DbSet<CartonsJaunesModele> CartonsJaunes { get; set; }
        public virtual DbSet<FifaModeles.CartonsRougesModele> CartonsRouges { get; set; }
        public virtual DbSet<FifaModeles.ChampionnatsModele> Championnats { get; set; }
        public virtual DbSet<FifaModeles.EquipesModele> Equipes { get; set; }
        public virtual DbSet<FifaModeles.EquipesParticipationModele> EquipesParticipation { get; set; }
        public virtual DbSet<FifaModeles.FeuillesDeMatchModele> FeuillesDeMatch { get; set; }
        public virtual DbSet<FifaModeles.GoalsModele> GoalsHistory { get; set; }
        public virtual DbSet<FifaModeles.IntersaisonsModele> Intersaisons { get; set; }
        public virtual DbSet<FifaModeles.JoueursModele> Joueurs { get; set; }
        public virtual DbSet<FifaModeles.JoueursParticipationModele> JoueursParticipation { get; set; }
        public virtual DbSet<FifaModeles.MatchsModele> Matchs { get; set; }
        public virtual DbSet<FifaModeles.QuartersModele> Quarters { get; set; }
        public virtual DbSet<FifaModeles.TransfertsModele> Transferts { get; set; }

        public virtual int CartonsJaunes_Add(Nullable<System.Guid> joueurId, Nullable<System.Guid> matchId, Nullable<int> minuteRecue)
        {
            var joueurIdParameter = joueurId.HasValue ?
                new ObjectParameter("joueurId", joueurId) :
                new ObjectParameter("joueurId", typeof(System.Guid));
    
            var matchIdParameter = matchId.HasValue ?
                new ObjectParameter("matchId", matchId) :
                new ObjectParameter("matchId", typeof(System.Guid));
    
            var minuteRecueParameter = minuteRecue.HasValue ?
                new ObjectParameter("minuteRecue", minuteRecue) :
                new ObjectParameter("minuteRecue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CartonsJaunes_Add", joueurIdParameter, matchIdParameter, minuteRecueParameter);
        }
    
        public virtual ObjectResult<CartonsJaunes_GetAll_Result> CartonsJaunes_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CartonsJaunes_GetAll_Result>("CartonsJaunes_GetAll");
        }
    
        public virtual int CartonsJaunes_Update(Nullable<System.Guid> carteJauneId, Nullable<System.Guid> joueurId, Nullable<System.Guid> matchId, Nullable<int> minuteRecue, Nullable<System.DateTime> lastUpdate)
        {
            var carteJauneIdParameter = carteJauneId.HasValue ?
                new ObjectParameter("carteJauneId", carteJauneId) :
                new ObjectParameter("carteJauneId", typeof(System.Guid));
    
            var joueurIdParameter = joueurId.HasValue ?
                new ObjectParameter("joueurId", joueurId) :
                new ObjectParameter("joueurId", typeof(System.Guid));
    
            var matchIdParameter = matchId.HasValue ?
                new ObjectParameter("matchId", matchId) :
                new ObjectParameter("matchId", typeof(System.Guid));
    
            var minuteRecueParameter = minuteRecue.HasValue ?
                new ObjectParameter("minuteRecue", minuteRecue) :
                new ObjectParameter("minuteRecue", typeof(int));
    
            var lastUpdateParameter = lastUpdate.HasValue ?
                new ObjectParameter("lastUpdate", lastUpdate) :
                new ObjectParameter("lastUpdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CartonsJaunes_Update", carteJauneIdParameter, joueurIdParameter, matchIdParameter, minuteRecueParameter, lastUpdateParameter);
        }
    
        public virtual int CartonsRouges_Add(Nullable<System.Guid> joueurId, Nullable<System.Guid> matchId, Nullable<int> nombreSuspensionsRestantes, Nullable<int> minuteRecue)
        {
            var joueurIdParameter = joueurId.HasValue ?
                new ObjectParameter("joueurId", joueurId) :
                new ObjectParameter("joueurId", typeof(System.Guid));
    
            var matchIdParameter = matchId.HasValue ?
                new ObjectParameter("matchId", matchId) :
                new ObjectParameter("matchId", typeof(System.Guid));
    
            var nombreSuspensionsRestantesParameter = nombreSuspensionsRestantes.HasValue ?
                new ObjectParameter("nombreSuspensionsRestantes", nombreSuspensionsRestantes) :
                new ObjectParameter("nombreSuspensionsRestantes", typeof(int));
    
            var minuteRecueParameter = minuteRecue.HasValue ?
                new ObjectParameter("minuteRecue", minuteRecue) :
                new ObjectParameter("minuteRecue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CartonsRouges_Add", joueurIdParameter, matchIdParameter, nombreSuspensionsRestantesParameter, minuteRecueParameter);
        }
    
        public virtual int CartonsRouges_DiminueSuspension(Nullable<System.Guid> carteRougeId)
        {
            var carteRougeIdParameter = carteRougeId.HasValue ?
                new ObjectParameter("carteRougeId", carteRougeId) :
                new ObjectParameter("carteRougeId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CartonsRouges_DiminueSuspension", carteRougeIdParameter);
        }
    
        public virtual ObjectResult<CartonsRouges_GetAll_Result> CartonsRouges_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CartonsRouges_GetAll_Result>("CartonsRouges_GetAll");
        }
    
        public virtual int CartonsRouges_Update(Nullable<System.Guid> carteRougeId, Nullable<System.Guid> joueurId, Nullable<System.Guid> matchId, Nullable<int> nombreSuspensionsRestantes, Nullable<int> minuteRecue, Nullable<System.DateTime> lastUpdate)
        {
            var carteRougeIdParameter = carteRougeId.HasValue ?
                new ObjectParameter("carteRougeId", carteRougeId) :
                new ObjectParameter("carteRougeId", typeof(System.Guid));
    
            var joueurIdParameter = joueurId.HasValue ?
                new ObjectParameter("joueurId", joueurId) :
                new ObjectParameter("joueurId", typeof(System.Guid));
    
            var matchIdParameter = matchId.HasValue ?
                new ObjectParameter("matchId", matchId) :
                new ObjectParameter("matchId", typeof(System.Guid));
    
            var nombreSuspensionsRestantesParameter = nombreSuspensionsRestantes.HasValue ?
                new ObjectParameter("nombreSuspensionsRestantes", nombreSuspensionsRestantes) :
                new ObjectParameter("nombreSuspensionsRestantes", typeof(int));
    
            var minuteRecueParameter = minuteRecue.HasValue ?
                new ObjectParameter("minuteRecue", minuteRecue) :
                new ObjectParameter("minuteRecue", typeof(int));
    
            var lastUpdateParameter = lastUpdate.HasValue ?
                new ObjectParameter("lastUpdate", lastUpdate) :
                new ObjectParameter("lastUpdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CartonsRouges_Update", carteRougeIdParameter, joueurIdParameter, matchIdParameter, nombreSuspensionsRestantesParameter, minuteRecueParameter, lastUpdateParameter);
        }
    
        public virtual int Championnats_Add(Nullable<int> annee)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("Annee", annee) :
                new ObjectParameter("Annee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Championnats_Add", anneeParameter);
        }
    
        public virtual ObjectResult<Championnats_GetAll_Result> Championnats_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Championnats_GetAll_Result>("Championnats_GetAll");
        }
    
        public virtual int CreationDivisionChampionnat(Nullable<System.DateTime> dateDebutChampionnat, Nullable<System.Guid> championnatId)
        {
            var dateDebutChampionnatParameter = dateDebutChampionnat.HasValue ?
                new ObjectParameter("DateDebutChampionnat", dateDebutChampionnat) :
                new ObjectParameter("DateDebutChampionnat", typeof(System.DateTime));
    
            var championnatIdParameter = championnatId.HasValue ?
                new ObjectParameter("ChampionnatId", championnatId) :
                new ObjectParameter("ChampionnatId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreationDivisionChampionnat", dateDebutChampionnatParameter, championnatIdParameter);
        }
    
        public virtual int EquipeParticipation_Add(Nullable<System.Guid> equipeId, Nullable<System.Guid> championnatId)
        {
            var equipeIdParameter = equipeId.HasValue ?
                new ObjectParameter("equipeId", equipeId) :
                new ObjectParameter("equipeId", typeof(System.Guid));
    
            var championnatIdParameter = championnatId.HasValue ?
                new ObjectParameter("championnatId", championnatId) :
                new ObjectParameter("championnatId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipeParticipation_Add", equipeIdParameter, championnatIdParameter);
        }
    
        public virtual ObjectResult<EquipeParticipation_GetAll_Result> EquipeParticipation_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EquipeParticipation_GetAll_Result>("EquipeParticipation_GetAll");
        }
    
        public virtual ObjectResult<Equipes_GetAll_Result> Equipes_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Equipes_GetAll_Result>("Equipes_GetAll");
        }
    
        public virtual int FeuilleDeMatch_Add(Nullable<System.Guid> matchId, Nullable<System.Guid> equipeId)
        {
            var matchIdParameter = matchId.HasValue ?
                new ObjectParameter("matchId", matchId) :
                new ObjectParameter("matchId", typeof(System.Guid));
    
            var equipeIdParameter = equipeId.HasValue ?
                new ObjectParameter("equipeId", equipeId) :
                new ObjectParameter("equipeId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FeuilleDeMatch_Add", matchIdParameter, equipeIdParameter);
        }
    
        public virtual ObjectResult<FeuilleDeMatch_GetAll_Result> FeuilleDeMatch_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FeuilleDeMatch_GetAll_Result>("FeuilleDeMatch_GetAll");
        }
    
        public virtual ObjectResult<FeuilleDeMatch_GetNombreJoueursInscrits_Result> FeuilleDeMatch_GetNombreJoueursInscrits(Nullable<System.Guid> matchId, Nullable<System.Guid> equipeId)
        {
            var matchIdParameter = matchId.HasValue ?
                new ObjectParameter("matchId", matchId) :
                new ObjectParameter("matchId", typeof(System.Guid));
    
            var equipeIdParameter = equipeId.HasValue ?
                new ObjectParameter("equipeId", equipeId) :
                new ObjectParameter("equipeId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FeuilleDeMatch_GetNombreJoueursInscrits_Result>("FeuilleDeMatch_GetNombreJoueursInscrits", matchIdParameter, equipeIdParameter);
        }
    
        public virtual int FeuilleDeMatch_Update(Nullable<System.Guid> feuilleId, Nullable<System.Guid> matchId, Nullable<System.Guid> equipeId, Nullable<System.DateTime> lastUpdate)
        {
            var feuilleIdParameter = feuilleId.HasValue ?
                new ObjectParameter("feuilleId", feuilleId) :
                new ObjectParameter("feuilleId", typeof(System.Guid));
    
            var matchIdParameter = matchId.HasValue ?
                new ObjectParameter("matchId", matchId) :
                new ObjectParameter("matchId", typeof(System.Guid));
    
            var equipeIdParameter = equipeId.HasValue ?
                new ObjectParameter("equipeId", equipeId) :
                new ObjectParameter("equipeId", typeof(System.Guid));
    
            var lastUpdateParameter = lastUpdate.HasValue ?
                new ObjectParameter("lastUpdate", lastUpdate) :
                new ObjectParameter("lastUpdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FeuilleDeMatch_Update", feuilleIdParameter, matchIdParameter, equipeIdParameter, lastUpdateParameter);
        }
    
        public virtual int Goals_Add(Nullable<System.Guid> joueurId, Nullable<System.Guid> matchId, Nullable<System.Guid> equipeId, Nullable<int> minuteMarque)
        {
            var joueurIdParameter = joueurId.HasValue ?
                new ObjectParameter("joueurId", joueurId) :
                new ObjectParameter("joueurId", typeof(System.Guid));
    
            var matchIdParameter = matchId.HasValue ?
                new ObjectParameter("matchId", matchId) :
                new ObjectParameter("matchId", typeof(System.Guid));
    
            var equipeIdParameter = equipeId.HasValue ?
                new ObjectParameter("equipeId", equipeId) :
                new ObjectParameter("equipeId", typeof(System.Guid));
    
            var minuteMarqueParameter = minuteMarque.HasValue ?
                new ObjectParameter("minuteMarque", minuteMarque) :
                new ObjectParameter("minuteMarque", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Goals_Add", joueurIdParameter, matchIdParameter, equipeIdParameter, minuteMarqueParameter);
        }
    
        public virtual int Goals_Delete(Nullable<System.Guid> goalId)
        {
            var goalIdParameter = goalId.HasValue ?
                new ObjectParameter("goalId", goalId) :
                new ObjectParameter("goalId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Goals_Delete", goalIdParameter);
        }
    
        public virtual ObjectResult<Goals_GetAll_Result> Goals_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Goals_GetAll_Result>("Goals_GetAll");
        }
    
        public virtual int Goals_Update(Nullable<System.Guid> goalId, Nullable<System.Guid> joueurId, Nullable<System.Guid> matchId, Nullable<int> minuteMarque, Nullable<System.DateTime> lastUpdate)
        {
            var goalIdParameter = goalId.HasValue ?
                new ObjectParameter("goalId", goalId) :
                new ObjectParameter("goalId", typeof(System.Guid));
    
            var joueurIdParameter = joueurId.HasValue ?
                new ObjectParameter("joueurId", joueurId) :
                new ObjectParameter("joueurId", typeof(System.Guid));
    
            var matchIdParameter = matchId.HasValue ?
                new ObjectParameter("matchId", matchId) :
                new ObjectParameter("matchId", typeof(System.Guid));
    
            var minuteMarqueParameter = minuteMarque.HasValue ?
                new ObjectParameter("minuteMarque", minuteMarque) :
                new ObjectParameter("minuteMarque", typeof(int));
    
            var lastUpdateParameter = lastUpdate.HasValue ?
                new ObjectParameter("lastUpdate", lastUpdate) :
                new ObjectParameter("lastUpdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Goals_Update", goalIdParameter, joueurIdParameter, matchIdParameter, minuteMarqueParameter, lastUpdateParameter);
        }
    
        public virtual int Intersaisons_Add(Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<System.Guid> championnatId)
        {
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("dateDebut", dateDebut) :
                new ObjectParameter("dateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("dateFin", dateFin) :
                new ObjectParameter("dateFin", typeof(System.DateTime));
    
            var championnatIdParameter = championnatId.HasValue ?
                new ObjectParameter("ChampionnatId", championnatId) :
                new ObjectParameter("ChampionnatId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Intersaisons_Add", dateDebutParameter, dateFinParameter, championnatIdParameter);
        }
    
        public virtual ObjectResult<Intersaisons_GetAll_Result> Intersaisons_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Intersaisons_GetAll_Result>("Intersaisons_GetAll");
        }
    
        public virtual ObjectResult<Joueurs_GetAll_Result> Joueurs_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Joueurs_GetAll_Result>("Joueurs_GetAll");
        }
    
        public virtual int JoueursParticipation_Add(Nullable<System.Guid> joueurId, Nullable<System.Guid> feuilleId)
        {
            var joueurIdParameter = joueurId.HasValue ?
                new ObjectParameter("joueurId", joueurId) :
                new ObjectParameter("joueurId", typeof(System.Guid));
    
            var feuilleIdParameter = feuilleId.HasValue ?
                new ObjectParameter("feuilleId", feuilleId) :
                new ObjectParameter("feuilleId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JoueursParticipation_Add", joueurIdParameter, feuilleIdParameter);
        }
    
        public virtual int JoueursParticipation_Delete(Nullable<System.Guid> joueurId, Nullable<System.Guid> feuilleId)
        {
            var joueurIdParameter = joueurId.HasValue ?
                new ObjectParameter("joueurId", joueurId) :
                new ObjectParameter("joueurId", typeof(System.Guid));
    
            var feuilleIdParameter = feuilleId.HasValue ?
                new ObjectParameter("feuilleId", feuilleId) :
                new ObjectParameter("feuilleId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JoueursParticipation_Delete", joueurIdParameter, feuilleIdParameter);
        }
    
        public virtual ObjectResult<JoueursParticipation_GetAll_Result> JoueursParticipation_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JoueursParticipation_GetAll_Result>("JoueursParticipation_GetAll");
        }
    
        public virtual ObjectResult<JoueursParticipation_GetOne_Result> JoueursParticipation_GetOne(Nullable<System.Guid> feuilleId)
        {
            var feuilleIdParameter = feuilleId.HasValue ?
                new ObjectParameter("feuilleId", feuilleId) :
                new ObjectParameter("feuilleId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JoueursParticipation_GetOne_Result>("JoueursParticipation_GetOne", feuilleIdParameter);
        }
    
        public virtual int Matchs_Add(Nullable<System.DateTime> matchDate, Nullable<System.Guid> equipe1Id, Nullable<System.Guid> equipe2Id)
        {
            var matchDateParameter = matchDate.HasValue ?
                new ObjectParameter("matchDate", matchDate) :
                new ObjectParameter("matchDate", typeof(System.DateTime));
    
            var equipe1IdParameter = equipe1Id.HasValue ?
                new ObjectParameter("equipe1Id", equipe1Id) :
                new ObjectParameter("equipe1Id", typeof(System.Guid));
    
            var equipe2IdParameter = equipe2Id.HasValue ?
                new ObjectParameter("equipe2Id", equipe2Id) :
                new ObjectParameter("equipe2Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Matchs_Add", matchDateParameter, equipe1IdParameter, equipe2IdParameter);
        }
    
        public virtual ObjectResult<Matchs_GetAll_Result> Matchs_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Matchs_GetAll_Result>("Matchs_GetAll");
        }
    
        public virtual int Matchs_Update(Nullable<System.Guid> matchId, Nullable<System.DateTime> matchDate, Nullable<System.Guid> equipe1Id, Nullable<System.Guid> equipe2Id, Nullable<int> equipe1Points, Nullable<int> equipe2Points, Nullable<System.DateTime> lastUpdate)
        {
            var matchIdParameter = matchId.HasValue ?
                new ObjectParameter("matchId", matchId) :
                new ObjectParameter("matchId", typeof(System.Guid));
    
            var matchDateParameter = matchDate.HasValue ?
                new ObjectParameter("matchDate", matchDate) :
                new ObjectParameter("matchDate", typeof(System.DateTime));
    
            var equipe1IdParameter = equipe1Id.HasValue ?
                new ObjectParameter("equipe1Id", equipe1Id) :
                new ObjectParameter("equipe1Id", typeof(System.Guid));
    
            var equipe2IdParameter = equipe2Id.HasValue ?
                new ObjectParameter("equipe2Id", equipe2Id) :
                new ObjectParameter("equipe2Id", typeof(System.Guid));
    
            var equipe1PointsParameter = equipe1Points.HasValue ?
                new ObjectParameter("equipe1Points", equipe1Points) :
                new ObjectParameter("equipe1Points", typeof(int));
    
            var equipe2PointsParameter = equipe2Points.HasValue ?
                new ObjectParameter("equipe2Points", equipe2Points) :
                new ObjectParameter("equipe2Points", typeof(int));
    
            var lastUpdateParameter = lastUpdate.HasValue ?
                new ObjectParameter("lastUpdate", lastUpdate) :
                new ObjectParameter("lastUpdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Matchs_Update", matchIdParameter, matchDateParameter, equipe1IdParameter, equipe2IdParameter, equipe1PointsParameter, equipe2PointsParameter, lastUpdateParameter);
        }
    
        public virtual int Quarters_Add(Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<System.Guid> championnatId)
        {
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("dateDebut", dateDebut) :
                new ObjectParameter("dateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("dateFin", dateFin) :
                new ObjectParameter("dateFin", typeof(System.DateTime));
    
            var championnatIdParameter = championnatId.HasValue ?
                new ObjectParameter("ChampionnatId", championnatId) :
                new ObjectParameter("ChampionnatId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Quarters_Add", dateDebutParameter, dateFinParameter, championnatIdParameter);
        }
    
        public virtual ObjectResult<Quarters_GetAll_Result> Quarters_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Quarters_GetAll_Result>("Quarters_GetAll");
        }
    
        public virtual int Tansferts_Add(Nullable<System.Guid> joueurId, Nullable<System.Guid> equipeId, Nullable<System.DateTime> dateTransfert, Nullable<System.DateTime> lastUpdate)
        {
            var joueurIdParameter = joueurId.HasValue ?
                new ObjectParameter("joueurId", joueurId) :
                new ObjectParameter("joueurId", typeof(System.Guid));
    
            var equipeIdParameter = equipeId.HasValue ?
                new ObjectParameter("equipeId", equipeId) :
                new ObjectParameter("equipeId", typeof(System.Guid));
    
            var dateTransfertParameter = dateTransfert.HasValue ?
                new ObjectParameter("dateTransfert", dateTransfert) :
                new ObjectParameter("dateTransfert", typeof(System.DateTime));
    
            var lastUpdateParameter = lastUpdate.HasValue ?
                new ObjectParameter("lastUpdate", lastUpdate) :
                new ObjectParameter("lastUpdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tansferts_Add", joueurIdParameter, equipeIdParameter, dateTransfertParameter, lastUpdateParameter);
        }
    
        public virtual ObjectResult<Transferts_GetAll_Result> Transferts_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Transferts_GetAll_Result>("Transferts_GetAll");
        }
    
        public virtual ObjectResult<Transferts_GetParticipants_Result> Transferts_GetParticipants(Nullable<System.Guid> equipeId, Nullable<System.DateTime> matchDate)
        {
            var equipeIdParameter = equipeId.HasValue ?
                new ObjectParameter("equipeId", equipeId) :
                new ObjectParameter("equipeId", typeof(System.Guid));
    
            var matchDateParameter = matchDate.HasValue ?
                new ObjectParameter("matchDate", matchDate) :
                new ObjectParameter("matchDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Transferts_GetParticipants_Result>("Transferts_GetParticipants", equipeIdParameter, matchDateParameter);
        }
    
        public virtual int Championnats_Delete(Nullable<System.Guid> championnatId)
        {
            var championnatIdParameter = championnatId.HasValue ?
                new ObjectParameter("ChampionnatId", championnatId) :
                new ObjectParameter("ChampionnatId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Championnats_Delete", championnatIdParameter);
        }
    
        public virtual int EquipeParticipation_Delete(Nullable<System.Guid> championnatId)
        {
            var championnatIdParameter = championnatId.HasValue ?
                new ObjectParameter("ChampionnatId", championnatId) :
                new ObjectParameter("ChampionnatId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipeParticipation_Delete", championnatIdParameter);
        }
    
        public virtual int Intersaisons_Delete(Nullable<System.Guid> championnatId)
        {
            var championnatIdParameter = championnatId.HasValue ?
                new ObjectParameter("ChampionnatId", championnatId) :
                new ObjectParameter("ChampionnatId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Intersaisons_Delete", championnatIdParameter);
        }
    
        public virtual int Quarters_Delete(Nullable<System.Guid> championnatId)
        {
            var championnatIdParameter = championnatId.HasValue ?
                new ObjectParameter("ChampionnatId", championnatId) :
                new ObjectParameter("ChampionnatId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Quarters_Delete", championnatIdParameter);
        }
    }
}
